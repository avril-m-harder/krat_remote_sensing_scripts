## rename 'R2' mounds to match their actual locations (unique names R2.1-R2.6)
r2 <- man.ass[man.ass$terr=='R2',]
for(i in 1:nrow(r2)){
pop.dat[which(pop.dat$lat == r2$lat[i] & pop.dat$long == r2$long[i]), 'terr'] <- r2$new.db.name[i]
}
head(pop.dat)
head(man.ass)
table(man.ass$terr)
##### Read in manual mound:cell assignments #####
### >> also needed to re-name unique mounds that were all labeled 'R2' in the original database
man.ass <- read.csv('/Users/Avril/Documents/krat_remote_sensing/archive/sorting_out_mound_names/manual_mound_cell_assignments.csv')
## rename 'R2' mounds to match their actual locations (unique names R2.1-R2.6)
r2 <- man.ass[man.ass$terr=='R2',]
for(i in 1:nrow(r2)){
pop.dat[which(pop.dat$lat == r2$lat[i] & pop.dat$long == r2$long[i]), 'terr'] <- r2$new.db.name[i]
}
table(pop.dat$terr)
##### Read in TC and other index results #####
## set file names to be read in
tc.fn <- 'tc_cloud_free' ## for TC data -- tc_initial_test    tc_cloud_free
mc.fn <- 'mnd_key_cloud_free' ## for mound/cell ID key -- mnd_key_initial_test    mnd_key_cloud_free
## read in list of scenes of interest (e.g., cloud-free)
# files <- list.files(pattern="*.grd") ## to run with ALL scenes (causes some issues due to cloud masking step)
# files <- read.table('/Users/Avril/Documents/krat_remote_sensing/C2L2_landsat_5_data_overviews/C2L2_intermediate_cloud_scenes.txt') ## scenes with <=60% cloud cover (n=574)
files <- read.table('/Users/Avril/Documents/krat_remote_sensing/C2L2_landsat_5_data_overviews/C2L2_cloud_free_scenes.txt') ## scenes with 0% cloud cover (n=233)
files$V1 <- paste0(files$V1,'_CROPPED.grd')
files <- as.vector(files$V1)
## results of manual checks: for cloud-free scenes, corrupted info in...
## 90, 92, 93, 103, 105, 107, 109, 110, 112, 113, 116, 119, 122, 156, 159, 166
## 156, 159, 166 really weird - like they're not the correct location?
remove <- c(90, 92, 93, 103, 105, 107, 109, 110, 112, 113, 116, 119, 122, 156, 159, 166)
scenes.rm <- gsub('_CROPPED.grd', '', files[remove])
tc.dat <- read.csv(paste0('/Users/Avril/Documents/krat_remote_sensing/C2L2_tc_output_tables/C2L2_',tc.fn,'.csv'))
mc.key <- read.csv(paste0('/Users/Avril/Documents/krat_remote_sensing/C2L2_tc_output_tables/C2L2_',mc.fn,'.csv'))
## remove scenes with weird data (for cloud-free scenes, this really improves the outlier situation)
tc.dat <- tc.dat[which(tc.dat$prod.id %notin% scenes.rm),]
mc.key <- mc.key[which(mc.key$prod.id %notin% scenes.rm),]
mounds.cells.only <- mc.key[,c('database.name','cell.num')]
mounds.cells.only <- mounds.cells.only[!duplicated(mounds.cells.only),]
##### Define seasons #####
tc.dat$year <- do.call(rbind, strsplit(tc.dat$acq.date, split='-'))[,1]
## define brood-year lag months (e.g., for indivs born in 2000, lag.year would be set to 2000 for June 1999-May 2000)
## i.e., abiotic data from the months of June - May are predicting survival/fitness for indivs presumably born between those months
tc.dat$year <- as.numeric(tc.dat$year)
tc.dat$lag.year <- as.numeric(tc.dat$year)
tc.dat[which(tc.dat$month %in% c(6:12)), 'lag.year'] <- tc.dat[which(tc.dat$month %in% c(6:12)), 'year'] + 1
tc.dat$month <- do.call(rbind, strsplit(tc.dat$acq.date, split='-'))[,2]
tc.dat$month <- as.numeric(tc.dat$month)
### two seasonal options:
## (1) define seasons by quarters (1=spring, 2=summer, 3=fall, 4=winter)
tc.dat[which(tc.dat$month %in% c(1,2,3)), 'month.szn'] <- 1
tc.dat[which(tc.dat$month %in% c(4,5,6)), 'month.szn'] <- 2
tc.dat[which(tc.dat$month %in% c(7,8,9)), 'month.szn'] <- 3
tc.dat[which(tc.dat$month %in% c(10,11,12)), 'month.szn'] <- 4
## (2) define seasons by expected precip (1=June-August, 2=Dec-March, 0=outside these months)
tc.dat[which(tc.dat$month %in% c(6,7,8)), 'weather.szn'] <- 1
tc.dat[which(tc.dat$month %in% c(12,1,2,3)), 'weather.szn'] <- 2
tc.dat[which(tc.dat$month %in% c(4,5,9,10,11)), 'weather.szn'] <- 0
## read in 1 cropped scene to get background image and cell #s (rows, columns)
ls5.stack <- brick('/Users/Avril/Documents/krat_remote_sensing/C2L2_cropped_landsat45tm_scenes/LT05_L2SP_035038_20020622_20200905_02_T1_CROPPED.grd')
raster::plotRGB(ls5.stack, r=3, g=2, b=1, scale=ls5.stack@data@max[c(3,2,1)], margins=FALSE)
##### Get number of offspring recorded per mound per year and assign to cells in the raster #####
OUT <- NULL
head(pop.dat)
y <- 1990
sub <- pop.dat[pop.dat$year == y,] ## subset to year
sub
off <- sub[sub$offspring == 1,] ## get information for all offspring first recorded in that year
off
off <- as.data.frame(table(off$terr)) ## get tally of offspring per mound
off
off <- sub[sub$offspring == 1,] ## get information for all offspring first recorded in that year
off
head(pop.dat)
##### Read in more population (Janna's) data #####
j.dat <- read.csv('/Users/Avril/Documents/krats/krat_data_and_paper2/summary_allstats2_withgen_zeroes.csv')
head(j.dat)
head(off)
off
head(sub)
head(pop.dat)
table(pop.dat$row)
head(off)
j.dat[which(j.dat$id == '799' | j.dat$id == '903'),]
head(j.dat)
##### Get number of offspring recorded per mound per year and assign to cells in the raster #####
## >> relies on 'offspring' == 1 designation to assign offspring to the mound where recorded;
## >> does not consider any pedigree information (e.g., where individual ID'ed as mom was sampled)
OUT <- NULL
for(y in unique(pop.dat$year)){
sub <- pop.dat[pop.dat$year == y,] ## subset to year
off <- sub[sub$offspring == 1,] ## get information for all offspring first recorded in that year
off <- as.data.frame(table(off$terr)) ## get tally of offspring per mound
off$year <- y
OUT <- rbind(OUT, off)
}
off <- OUT
colnames(off) <- c('database.name','num.off','year')
off <- off[which(off$year <= 2005),]
temp <- mc.key[,c('database.name','cell.num')]
temp <- temp[!duplicated(temp),] ## 214 entries, confirming mounds are always assigned to the same cell # across scenes
off <- merge(off, temp, by='database.name') ## combine mound/offspring information with cell IDs
head(off)
dim(off)
sub <- pop.dat[pop.dat$year == y,] ## subset to year
off <- sub[sub$offspring == 1,] ## get information for all offspring first recorded in that year
off
head(j.dat)
head(off)
##### Get number of offspring recorded per mound per year and assign to cells in the raster #####
## >> relies on 'offspring' == 1 designation to assign offspring to the mound where recorded;
## >> does not consider any pedigree information (e.g., where individual ID'ed as mom was sampled)
OUT <- NULL
for(y in unique(pop.dat$year)){
sub <- pop.dat[pop.dat$year == y,] ## subset to year
off <- sub[sub$offspring == 1,] ## get information for all offspring first recorded in that year
off <- as.data.frame(table(off$terr)) ## get tally of offspring per mound
off$year <- y
OUT <- rbind(OUT, off)
}
off <- OUT
colnames(off) <- c('database.name','num.off','year')
off <- off[which(off$year <= 2005),]
temp <- mc.key[,c('database.name','cell.num')]
temp <- temp[!duplicated(temp),] ## 214 entries, confirming mounds are always assigned to the same cell # across scenes
off.per.mnd <- merge(off, temp, by='database.name') ## combine mound/offspring information with cell IDs
head(off.per.mnd)
off.per.mnd <- off.per.mnd[order(off.per.mnd$year),]
head(off.per.mnd)
head(off)
head(sub)
sub <- pop.dat[pop.dat$year == y,] ## subset to year
head(sub)
head(j.dat)
head(sub)
off <- sub[sub$offspring == 1,] ## get information for all offspring first recorded in that year
head(off)
length(unique(off$id))
head(j.dat)
ages <- j.dat['id','birthyear','deathyear']
ages <- j.dat[,c('id','birthyear','deathyear')]
ages$age <- ages$deathyear - ages$birthyear
head(ages)
ages <- ages[,c(1,4)]
head(ages)
head(off)
off.ages <- ages[which(ages$id %in% off$id),]
head(off.ages)
off.ages
dim(off.ages)
dim(off)
head(ages)
head(off)
head(off.ages)
off <- merge(off, off.ages, by='id')
head(off)
##### Get number of offspring recorded per mound per year and assign to cells in the raster #####
## >> relies on 'offspring' == 1 designation to assign offspring to the mound where recorded;
## >> does not consider any pedigree information (e.g., where individual ID'ed as mom was sampled)
OUT <- NULL
for(y in unique(pop.dat$year)){
sub <- pop.dat[pop.dat$year == y,] ## subset to year
off <- sub[sub$offspring == 1,] ## get information for all offspring first recorded in that year
off.ages <- ages[which(ages$id %in% off$id),]
off <- merge(off, off.ages, by='id')
OUT <- rbind(OUT, off)
}
off <- OUT
head(off)
table(off$year)
off <- off[which(off$year <= 2005),]
temp <- mc.key[,c('database.name','cell.num')]
temp <- temp[!duplicated(temp),] ## 214 entries, confirming mounds are always assigned to the same cell # across scenes
head(off)
off <- merge(off, temp, by='database.name') ## combine mound/offspring information with cell IDs
head(off)
colnames(off[,'terr']) <- 'database.name'
colnames(off)
colnames(off)[6] <- 'database.name'
head(off)
off <- merge(off, temp, by='database.name') ## combine mound/offspring information with cell IDs
# hist(off[which(off$database.name %notin% temp$database.name), 'year'], xlab='Year', main='Mounds unassigned to cells')
# unique(off[which(off$database.name %notin% temp$database.name), 'database.name'])
# unique(pop.dat[which(pop.dat$terr %notin% temp$database.name), 'terr'])
off <- off[order(off$year),]
head(off)
sub <- off[off$year == y,]
sub
i <- 3379
i
temp <- sub[sub$cell.num == i,]
temp
num.off <- length(unique(temp$id))
num.off
class(num.off)
num.surv <- length(unique(temp[which(temp$age > 0), 'id']))
avg.age <- mean(temp$age)
nrow(temp) == length(unique(temp$id))
head(off)
length(unique(off$id))
nrow(off)
temp
num.off <- nrow(temp) ## number of offspring recorded at that mound in that year
num.surv <- nrow(temp[which(temp$age > 0),]) ## number of offspring "" surviving to 1 year
num.surv
?sample
temp <- sub[sub$cell.num == i,]
temp
save <- c(i, j, y, num.off, num.surv, avg.age)
save
##### For each year and each cell, summarize mound and offspring information for later random sampling
## (# observed at that mound, # surviving > 0 years, average age)
OUT <- NULL
for(y in unique(off$year)){ ## for each year,
sub <- off[off$year == y,]
for(i in unique(sub$cell.num)){ ## and for each cell with offspring recorded in that year,
temp <- sub[sub$cell.num == i,]
for(j in unique(temp$database.name)){
temp1 <- temp[temp$database.name == j,]
stopifnot(nrow(temp1) == length(unique(temp1$id))) ## make sure no IDs show up twice
num.off <- nrow(temp1) ## number of offspring recorded at that mound in that year
num.surv <- nrow(temp1[which(temp1$age > 0),]) ## number of offspring "" surviving to 1 year
avg.age <- mean(temp1$age) ## average age at death for offspring recorded at that mound in that year
save <- c(i, j, y, num.off, num.surv, avg.age)
OUT <- rbind(OUT, save)
}
dim(OUT)
head(OUT)
mnd.offs <- as.data.frame(OUT)
head(mnd.offs)
mnd.offs <- as.data.frame(OUT, row.names = NULL)
head(mnd.offs)
mnd.offs <- as.data.frame(OUT, row.names = NA)
head(mnd.offs)
colnames(mnd.offs) <- c('cell.num','database.name','year','num.off','num.surv','avg.age')
head(mnd.offs)
table(mnd.offs$avg.age)
hist(mnd.offs$avg.age)
hist(as.numeric(mnd.offs$avg.age))
dev.off()
hist(as.numeric(mnd.offs$avg.age))
plot(density(as.numeric(mnd.offs$avg.age)))
mnd.offs$num.off <- as.numeric(mnd.offs$num.off)
mnd.offs$num.surv <- as.numeric(mnd.offs$num.surv)
mnd.offs$avg.age <- as.numeric(mnd.offs$avg.age)
head(mnd.offs)
hist(mnd.offs$num.off)
hist(mnd.offs$num.surv)
head(tc.dat)
head(mnd.offs)
sub <- mnd.offs[mnd.offs$year == y,]
sub
temp <- sub[which(sub$cell.num == i),]
temp
mnd <- sample(temp$database.name, 1)
mnd
save <- temp[temp$database.name == mnd,]
save
head(tc.dat)
tc.dat[which(tc.dat$cell.num == i & tc.dat$year == y),]
##### For each year and each cell, randomly select one mound with offspring recorded,
## add TC information for focal cell and averages for focal+adjacent cells
sub.tc.dat <- tc.dat[,c(1:4,10,17:21)]
head(sub.tc.dat)
head(save)
merge(save, sub.tc.dat, by='cell.num')
tc.temp <- sub.tc.dat[which(sub.tc.dat$cell.num == i & sub.tc.dat$year == y),]
tc.temp
head(save)
save$ann.mean.g <- mean(tc.temp$greenness)
head(save)
save$ann.mean.w <- mean(tc.temp$wetness)
save$ann.mean.b <- mean(tc.temp$brightness)
save$num.tc.obs <- nrow(tc.temp)
heave(save)
head(save)
head(tc.dat)
tail(tc.dat)
save <- temp[temp$database.name == mnd,] ## save the information for that mound
tc.temp <- sub.tc.dat[which(sub.tc.dat$cell.num == i & sub.tc.dat$year == y),] ## and save relevant TC information
## save annual information (number of scenes/observations, annual averages)
save$num.tc.obs <- nrow(tc.temp)
save$ann.mean.g <- mean(tc.temp$greenness)
save$ann.mean.w <- mean(tc.temp$wetness)
save$ann.mean.b <- mean(tc.temp$brightness)
## save month-based season data for each of 4 seasons
save$month.szn.1.g <- mean(tc.temp[which(tc.temp$month.szn == 1), 'greenness'])
save$month.szn.1.w <- mean(tc.temp[which(tc.temp$month.szn == 1), 'wetness'])
save$month.szn.1.b <- mean(tc.temp[which(tc.temp$month.szn == 1), 'brightness'])
save$month.szn.2.g <- mean(tc.temp[which(tc.temp$month.szn == 2), 'greenness'])
save$month.szn.2.w <- mean(tc.temp[which(tc.temp$month.szn == 2), 'wetness'])
save$month.szn.2.b <- mean(tc.temp[which(tc.temp$month.szn == 2), 'brightness'])
save$month.szn.3.g <- mean(tc.temp[which(tc.temp$month.szn == 3), 'greenness'])
save$month.szn.3.w <- mean(tc.temp[which(tc.temp$month.szn == 3), 'wetness'])
save$month.szn.3.b <- mean(tc.temp[which(tc.temp$month.szn == 3), 'brightness'])
save$month.szn.4.g <- mean(tc.temp[which(tc.temp$month.szn == 4), 'greenness'])
save$month.szn.4.w <- mean(tc.temp[which(tc.temp$month.szn == 4), 'wetness'])
save$month.szn.4.b <- mean(tc.temp[which(tc.temp$month.szn == 4), 'brightness'])
## save weather-based season data for each of 3 seasons
save$weather.szn.0.g <- mean(tc.temp[which(tc.temp$weather.szn == 0), 'greenness'])
save$weather.szn.0.w <- mean(tc.temp[which(tc.temp$weather.szn == 0), 'wetness'])
save$weather.szn.0.b <- mean(tc.temp[which(tc.temp$weather.szn == 0), 'brightness'])
save$weather.szn.1.g <- mean(tc.temp[which(tc.temp$weather.szn == 1), 'greenness'])
save$weather.szn.1.w <- mean(tc.temp[which(tc.temp$weather.szn == 1), 'wetness'])
save$weather.szn.1.b <- mean(tc.temp[which(tc.temp$weather.szn == 1), 'brightness'])
save$weather.szn.2.g <- mean(tc.temp[which(tc.temp$weather.szn == 2), 'greenness'])
save$weather.szn.2.w <- mean(tc.temp[which(tc.temp$weather.szn == 2), 'wetness'])
save$weather.szn.2.b <- mean(tc.temp[which(tc.temp$weather.szn == 2), 'brightness'])
save
ncol(save)
OUT <- NULL
for(y in unique(mnd.offs$year)){
sub <- mnd.offs[mnd.offs$year == y,]
for(i in unique(sub$cell.num)){
temp <- sub[which(sub$cell.num == i),]
mnd <- sample(temp$database.name, 1) ## randomly select mound
save <- temp[temp$database.name == mnd,] ## save the information for that mound
tc.temp <- sub.tc.dat[which(sub.tc.dat$cell.num == i & sub.tc.dat$year == y),] ## and save relevant TC information
## save annual information (number of scenes/observations, annual averages)
save$num.tc.obs <- nrow(tc.temp)
save$ann.mean.g <- mean(tc.temp$greenness)
save$ann.mean.w <- mean(tc.temp$wetness)
save$ann.mean.b <- mean(tc.temp$brightness)
## save month-based season data for each of 4 seasons
save$month.szn.1.g <- mean(tc.temp[which(tc.temp$month.szn == 1), 'greenness'])
save$month.szn.1.w <- mean(tc.temp[which(tc.temp$month.szn == 1), 'wetness'])
save$month.szn.1.b <- mean(tc.temp[which(tc.temp$month.szn == 1), 'brightness'])
save$month.szn.2.g <- mean(tc.temp[which(tc.temp$month.szn == 2), 'greenness'])
save$month.szn.2.w <- mean(tc.temp[which(tc.temp$month.szn == 2), 'wetness'])
save$month.szn.2.b <- mean(tc.temp[which(tc.temp$month.szn == 2), 'brightness'])
save$month.szn.3.g <- mean(tc.temp[which(tc.temp$month.szn == 3), 'greenness'])
save$month.szn.3.w <- mean(tc.temp[which(tc.temp$month.szn == 3), 'wetness'])
save$month.szn.3.b <- mean(tc.temp[which(tc.temp$month.szn == 3), 'brightness'])
save$month.szn.4.g <- mean(tc.temp[which(tc.temp$month.szn == 4), 'greenness'])
save$month.szn.4.w <- mean(tc.temp[which(tc.temp$month.szn == 4), 'wetness'])
save$month.szn.4.b <- mean(tc.temp[which(tc.temp$month.szn == 4), 'brightness'])
## save weather-based season data for each of 3 seasons
save$weather.szn.0.g <- mean(tc.temp[which(tc.temp$weather.szn == 0), 'greenness'])
save$weather.szn.0.w <- mean(tc.temp[which(tc.temp$weather.szn == 0), 'wetness'])
save$weather.szn.0.b <- mean(tc.temp[which(tc.temp$weather.szn == 0), 'brightness'])
save$weather.szn.1.g <- mean(tc.temp[which(tc.temp$weather.szn == 1), 'greenness'])
save$weather.szn.1.w <- mean(tc.temp[which(tc.temp$weather.szn == 1), 'wetness'])
save$weather.szn.1.b <- mean(tc.temp[which(tc.temp$weather.szn == 1), 'brightness'])
save$weather.szn.2.g <- mean(tc.temp[which(tc.temp$weather.szn == 2), 'greenness'])
save$weather.szn.2.w <- mean(tc.temp[which(tc.temp$weather.szn == 2), 'wetness'])
save$weather.szn.2.b <- mean(tc.temp[which(tc.temp$weather.szn == 2), 'brightness'])
OUT <- rbind(OUT, save)
}
dim(OUT)
head(OUT)
OUT <- NULL
tc.dat <- read.csv(paste0('/Users/Avril/Documents/krat_remote_sensing/C2L2_tc_output_tables/C2L2_',tc.fn,'.csv'))
mc.key <- read.csv(paste0('/Users/Avril/Documents/krat_remote_sensing/C2L2_tc_output_tables/C2L2_',mc.fn,'.csv'))
## remove scenes with weird data (for cloud-free scenes, this really improves the outlier situation)
tc.dat <- tc.dat[which(tc.dat$prod.id %notin% scenes.rm),]
mc.key <- mc.key[which(mc.key$prod.id %notin% scenes.rm),]
mounds.cells.only <- mc.key[,c('database.name','cell.num')]
mounds.cells.only <- mounds.cells.only[!duplicated(mounds.cells.only),]
##### Define seasons #####
tc.dat$year <- do.call(rbind, strsplit(tc.dat$acq.date, split='-'))[,1]
## define brood-year lag months (e.g., for indivs born in 2000, lag.year would be set to 2000 for June 1999-May 2000)
## i.e., abiotic data from the months of June - May are predicting survival/fitness for indivs presumably born between those months
tc.dat$year <- as.numeric(tc.dat$year)
tc.dat$lag.year <- as.numeric(tc.dat$year)
##### !! SOMETHING IS BROKEN HERE #####
tc.dat[which(tc.dat$month %in% c(6:12)), 'lag.year'] <- tc.dat[which(tc.dat$month %in% c(6:12)), 'year'] + 1
head(tc.dat)
plot(tc.dat$year, tc.dat$lag.year)
head(tc.da)
head(tc.dat)
tail(tc.dat)
##### !! SOMETHING IS BROKEN HERE #####
tc.dat$month <- do.call(rbind, strsplit(tc.dat$acq.date, split='-'))[,2]
tc.dat$month <- as.numeric(tc.dat$month)
tc.dat[which(tc.dat$month %in% c(6:12)), 'lag.year'] <- tc.dat[which(tc.dat$month %in% c(6:12)), 'year'] + 1
tail(tc.dat)
### two seasonal options:
## (1) define seasons by quarters (1=spring, 2=summer, 3=fall, 4=winter)
tc.dat[which(tc.dat$month %in% c(1,2,3)), 'month.szn'] <- 1
tc.dat[which(tc.dat$month %in% c(4,5,6)), 'month.szn'] <- 2
tc.dat[which(tc.dat$month %in% c(7,8,9)), 'month.szn'] <- 3
tc.dat[which(tc.dat$month %in% c(10,11,12)), 'month.szn'] <- 4
## (2) define seasons by expected precip (1=June-August, 2=Dec-March, 0=outside these months)
tc.dat[which(tc.dat$month %in% c(6,7,8)), 'weather.szn'] <- 1
tc.dat[which(tc.dat$month %in% c(12,1,2,3)), 'weather.szn'] <- 2
tc.dat[which(tc.dat$month %in% c(4,5,9,10,11)), 'weather.szn'] <- 0
## read in 1 cropped scene to get background image and cell #s (rows, columns)
ls5.stack <- brick('/Users/Avril/Documents/krat_remote_sensing/C2L2_cropped_landsat45tm_scenes/LT05_L2SP_035038_20020622_20200905_02_T1_CROPPED.grd')
raster::plotRGB(ls5.stack, r=3, g=2, b=1, scale=ls5.stack@data@max[c(3,2,1)], margins=FALSE)
##### Get number of offspring recorded per mound per year and assign to cells in the raster #####
## >> relies on 'offspring' == 1 designation to assign offspring to the mound where recorded;
## >> does not consider any pedigree information (e.g., where individual ID'ed as mom was sampled)
OUT <- NULL
for(y in unique(pop.dat$year)){
sub <- pop.dat[pop.dat$year == y,] ## subset to year
off <- sub[sub$offspring == 1,] ## get information for all offspring first recorded in that year
off.ages <- ages[which(ages$id %in% off$id),]
off <- merge(off, off.ages, by='id')
OUT <- rbind(OUT, off)
}
off <- OUT
off <- off[which(off$year <= 2005),]
colnames(off)[6] <- 'database.name'
temp <- mc.key[,c('database.name','cell.num')]
temp <- temp[!duplicated(temp),] ## 214 entries, confirming mounds are always assigned to the same cell # across scenes
off <- merge(off, temp, by='database.name') ## combine mound/offspring information with cell IDs
# hist(off[which(off$database.name %notin% temp$database.name), 'year'], xlab='Year', main='Mounds unassigned to cells')
# unique(off[which(off$database.name %notin% temp$database.name), 'database.name'])
# unique(pop.dat[which(pop.dat$terr %notin% temp$database.name), 'terr'])
off <- off[order(off$year),]
##### For each year and each cell, summarize mound and offspring information for later random sampling
## (# observed at that mound, # surviving > 0 years, average age)
OUT <- NULL
for(y in unique(off$year)){ ## for each year,
sub <- off[off$year == y,]
for(i in unique(sub$cell.num)){ ## and for each cell with offspring recorded in that year,
temp <- sub[sub$cell.num == i,]
for(j in unique(temp$database.name)){
temp1 <- temp[temp$database.name == j,]
stopifnot(nrow(temp1) == length(unique(temp1$id))) ## make sure no IDs show up twice
num.off <- nrow(temp1) ## number of offspring recorded at that mound in that year
num.surv <- nrow(temp1[which(temp1$age > 0),]) ## number of offspring "" surviving to 1 year
avg.age <- mean(temp1$age) ## average age at death for offspring recorded at that mound in that year
save <- c(i, j, y, num.off, num.surv, avg.age)
OUT <- rbind(OUT, save)
}
mnd.offs <- as.data.frame(OUT, row.names = NA)
colnames(mnd.offs) <- c('cell.num','database.name','year','num.off','num.surv','avg.age')
mnd.offs$num.off <- as.numeric(mnd.offs$num.off)
mnd.offs$num.surv <- as.numeric(mnd.offs$num.surv)
mnd.offs$avg.age <- as.numeric(mnd.offs$avg.age)
##### For each year and each cell, randomly select one mound with offspring recorded,
## add TC information for focal cell
sub.tc.dat <- tc.dat[,c(1:4,10,17:21)] ## subset TC information to just keep relevant bits
OUT <- NULL
for(y in unique(mnd.offs$year)){
print(y)
sub <- mnd.offs[mnd.offs$year == y,]
for(i in unique(sub$cell.num)){
temp <- sub[which(sub$cell.num == i),]
mnd <- sample(temp$database.name, 1) ## randomly select mound
save <- temp[temp$database.name == mnd,] ## save the information for that mound
tc.temp <- sub.tc.dat[which(sub.tc.dat$cell.num == i & sub.tc.dat$year == y),] ## and save relevant TC information
## save annual information (number of scenes/observations, annual averages)
save$num.tc.obs <- nrow(tc.temp)
save$ann.mean.g <- mean(tc.temp$greenness, na.rm=TRUE)
save$ann.mean.w <- mean(tc.temp$wetness, na.rm=TRUE)
save$ann.mean.b <- mean(tc.temp$brightness, na.rm=TRUE)
## save month-based season data for each of 4 seasons
save$month.szn.1.obs <- nrow(tc.temp[which(tc.temp$month.szn == 1),])
save$month.szn.1.g <- mean(tc.temp[which(tc.temp$month.szn == 1), 'greenness'], na.rm=TRUE)
save$month.szn.1.w <- mean(tc.temp[which(tc.temp$month.szn == 1), 'wetness'], na.rm=TRUE)
save$month.szn.1.b <- mean(tc.temp[which(tc.temp$month.szn == 1), 'brightness'], na.rm=TRUE)
save$month.szn.2.obs <- nrow(tc.temp[which(tc.temp$month.szn == 2),])
save$month.szn.2.g <- mean(tc.temp[which(tc.temp$month.szn == 2), 'greenness'], na.rm=TRUE)
save$month.szn.2.w <- mean(tc.temp[which(tc.temp$month.szn == 2), 'wetness'], na.rm=TRUE)
save$month.szn.2.b <- mean(tc.temp[which(tc.temp$month.szn == 2), 'brightness'], na.rm=TRUE)
save$month.szn.3.obs <- nrow(tc.temp[which(tc.temp$month.szn == 3),])
save$month.szn.3.g <- mean(tc.temp[which(tc.temp$month.szn == 3), 'greenness'], na.rm=TRUE)
save$month.szn.3.w <- mean(tc.temp[which(tc.temp$month.szn == 3), 'wetness'], na.rm=TRUE)
save$month.szn.3.b <- mean(tc.temp[which(tc.temp$month.szn == 3), 'brightness'], na.rm=TRUE)
save$month.szn.4.obs <- nrow(tc.temp[which(tc.temp$month.szn == 4),])
save$month.szn.4.g <- mean(tc.temp[which(tc.temp$month.szn == 4), 'greenness'], na.rm=TRUE)
save$month.szn.4.w <- mean(tc.temp[which(tc.temp$month.szn == 4), 'wetness'], na.rm=TRUE)
save$month.szn.4.b <- mean(tc.temp[which(tc.temp$month.szn == 4), 'brightness'], na.rm=TRUE)
## save weather-based season data for each of 3 seasons
save$weather.szn.0.obs <- nrow(tc.temp[which(tc.temp$weather.szn == 0),])
save$weather.szn.0.g <- mean(tc.temp[which(tc.temp$weather.szn == 0), 'greenness'], na.rm=TRUE)
save$weather.szn.0.w <- mean(tc.temp[which(tc.temp$weather.szn == 0), 'wetness'], na.rm=TRUE)
save$weather.szn.0.b <- mean(tc.temp[which(tc.temp$weather.szn == 0), 'brightness'], na.rm=TRUE)
save$weather.szn.1.obs <- nrow(tc.temp[which(tc.temp$weather.szn == 1),])
save$weather.szn.1.g <- mean(tc.temp[which(tc.temp$weather.szn == 1), 'greenness'], na.rm=TRUE)
save$weather.szn.1.w <- mean(tc.temp[which(tc.temp$weather.szn == 1), 'wetness'], na.rm=TRUE)
save$weather.szn.1.b <- mean(tc.temp[which(tc.temp$weather.szn == 1), 'brightness'], na.rm=TRUE)
save$weather.szn.2.obs <- nrow(tc.temp[which(tc.temp$weather.szn == 2),])
save$weather.szn.2.g <- mean(tc.temp[which(tc.temp$weather.szn == 2), 'greenness'], na.rm=TRUE)
save$weather.szn.2.w <- mean(tc.temp[which(tc.temp$weather.szn == 2), 'wetness'], na.rm=TRUE)
save$weather.szn.2.b <- mean(tc.temp[which(tc.temp$weather.szn == 2), 'brightness'], na.rm=TRUE)
## can do lag-year assignments after the fact?
OUT <- rbind(OUT, save)
}
head(OUT)
random.mnd.tc.year <- as.data.frame(OUT)
head(random.mnd.tc.year)
getwd
getwd()
write.csv('../intermediate_data/random_mound_data_using_year.csv')
write.csv(random.mnd.tc.year, '../intermediate_data/random_mound_data_using_year.csv')
write.csv(random.mnd.tc.year, '../intermediate_data/random_mound_data_using_year.csv', row.names = FALSE)
head(random.mnd.tc.year)
plot(random.mnd.tc.year$ann.mean.b, random.mnd.tc.year$num.off)
dev.off()
plot(random.mnd.tc.year$ann.mean.b, random.mnd.tc.year$num.off)
View(temp1)
g.col <- 'forestgreen'
w.col <- 'deepskyblue2'
b.col <- 'tan4'
plot(random.mnd.tc.year$ann.mean.b, random.mnd.tc.year$num.off, col=alpha(b.col, 0.6))
plot(random.mnd.tc.year$ann.mean.b, random.mnd.tc.year$num.off, col=alpha(b.col, 0.6), pch=19)
plot(random.mnd.tc.year$ann.mean.g, random.mnd.tc.year$num.off, col=alpha(g.col, 0.6), pch=19)
plot(random.mnd.tc.year$ann.mean.b, random.mnd.tc.year$num.off, col=alpha(b.col, 0.4), pch=19)
plot(random.mnd.tc.year$ann.mean.g, random.mnd.tc.year$num.off, col=alpha(g.col, 0.4), pch=19)
plot(random.mnd.tc.year$ann.mean.w, random.mnd.tc.year$num.off, col=alpha(w.col, 0.4), pch=19)
plot(random.mnd.tc.year$ann.mean.b, random.mnd.tc.year$num.surv, col=alpha(b.col, 0.4), pch=19)
plot(random.mnd.tc.year$ann.mean.g, random.mnd.tc.year$num.surv, col=alpha(g.col, 0.4), pch=19)
plot(random.mnd.tc.year$ann.mean.w, random.mnd.tc.year$num.surv, col=alpha(w.col, 0.4), pch=19)
plot(random.mnd.tc.year$ann.mean.b, random.mnd.tc.year$avg.age, col=alpha(b.col, 0.4), pch=19)
plot(random.mnd.tc.year$ann.mean.g, random.mnd.tc.year$avg.age, col=alpha(g.col, 0.4), pch=19)
plot(random.mnd.tc.year$ann.mean.w, random.mnd.tc.year$avg.age, col=alpha(w.col, 0.4), pch=19)
plot(random.mnd.tc.year$ann.mean.b, random.mnd.tc.year$num.off, col=alpha(b.col, 0.4), pch=19)
plot(random.mnd.tc.year$ann.mean.b, random.mnd.tc.year$num.surv, col=alpha(b.col, 0.4), pch=19)
plot(random.mnd.tc.year$ann.mean.b, random.mnd.tc.year$avg.age, col=alpha(b.col, 0.4), pch=19)
